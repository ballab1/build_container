#!/bin/bash

#----------------------------------------------------------------------------------------------
function my.usage()
{
    local -i exit_status=${1:-1}

    cat >&2 << EOF
Usage:
    $progname [ -h|--help ] | [ <repoName> <repoName> <repoName> ]

    Common options:
        -h --help              Display a basic set of usage instructions

    Curate a docker repository, where <repoName> is its name  


EOF
    exit "$exit_status"
}

#----------------------------------------------------------------------------------------------
function my.cmdLineArgs()
{
    local usage='my.usage'

    # Parse command-line options into above variable
    local -r progname="$( basename "${BASH_SOURCE[0]}" )"
    local -r options=$(getopt --longoptions "help,Help,HELP" --options "Hh" --name "$progname" -- "$@") || "$usage" $?
    eval set -- "$options"

    local -A opts=()
    while true; do
        case "${1:-}" in
            -h|--h|--help|-help)  "$usage" 1;;
            -H|--H|--HELP|-HELP)  "$usage" 1;;
            --Help|-Help)         "$usage" 1;;
            --)                 shift; break;;
        esac
    done
    
    local val
    if [ ${#opts[*]} -gt 0 ]; then
        local -i i=0
        for val in "${!opts[@]}"; do
            [ $(( i++ )) -gt 0 ] && echo -n ' '
            printf '['\''%s'\'']='\''%s'\' "$val" "${opts[$val]}"
        done
    fi
    echo
    if [ $# -gt 0 ]; then
        for val in "$@"; do
            echo "$val"
        done
    fi
}

#----------------------------------------------------------------------------------------------

declare -i status
declare -a args
declare fn=registry.curateRepository

source "$(dirname "${BASH_SOURCE[0]}")/libs/appenv.bashlib"
appenv.loader "$fn"
args=( $( my.cmdLineArgs "$@" ) ) && status=$? || status=$?
[ $status -eq 0 ] && "$fn" ${args[@]}
