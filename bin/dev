#!/bin/bash

function cleanup()
{
    [ -s ~/.crypt-key ] || [ -e ~/.crypt-key ] && rm ~/.crypt-key
    [ -e ~/."${svc}.vars" ] && rm ~/."${svc}.vars"
    # clean up containers
    local -a containers
    mapfile -t containers < <(docker ps -a --format '{{.ID}}' --filter 'name=builder')
    [ ${#containers[*]} -eq 0 ] || docker rm -f ${containers[@]}
}

declare dir="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"
declare svc="$(basename "${BASH_SOURCE[0]}")"

# ensure there is no old stuck builder
cleanup

# ensure we have latest version of container
[ "${TEST:-}" ] || docker pull ${DOCKER_REGISTRY:-ubuntu-s2:5000/}${CONTAINER_OS:-alpine}/build_container:${CONTAINER_TAG:-latest}
[ ${1:-} ] || exit 0

# setup environment vars about host as well as conditional vars
cat << EOF > ~/".${svc}.vars"
HOST_IP=$(hostname -i)
HOST_NAME=$(hostname -s)
HOST_FQDN=$(hostname -f)
CFG_USER_SECRETS=${CFG_USER_SECRETS:-}
DOCKER_GID=$(getent group docker | cut -d: -f3)
KAFKA_AVRO_HOSTS=${KAFKA_AVRO_HOSTS:-ubuntu-s1,ubuntu-s3,ubuntu-s4}
KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS:-ubuntu-s1:9092,ubuntu-s3:9092,ubuntu-s4:9092}
KAFKA_CLUSTER=${KAFKA_CLUSTER:-home}
EOF

export BUILDER_UID=$(getent passwd $EUID | cut -d: -f3)
export BUILDER_GID=$(getent passwd $EUID | cut -d: -f4)

[ -f ~/.crypt-key  ] || touch ~/.crypt-key

# apply inspection of workspace to determine command when nothing supplied
declare -a args=( "$@" )
#[ "${#args[*]}" -gt 0 ] || args=( 'deduce_command_from_workspace' )

# run our command
docker-compose \
           --file "${dir}/${svc}.yml" \
           run --rm \
               --user "${BUILDER_UID}:$BUILDER_GID" \
               --name builder \
           "$svc" build_container "${args[@]}"

cleanup
